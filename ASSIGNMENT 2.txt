 #include <stdio.h> 
 #include <stdlib.h> 
 #include <pthread.h> 
    
 void *avg(void *str); 
 void *min(void *ptr); 
 void *max(void *ptr);
 
        
 int min,max;
 double avg;   
  
 typedef struct dtstruct 
 { 
    int size,*values; 
 }dtstruct; 
 
 main(int s, char *v[]) 
 { 
   while(s <=1) 
   { 
      printf("Incorrect input. \n\n"); 
      printf("Please enter one or more inputs.\n"); 
      exit(0); 
   } 
      
  int i = 0, copy[s-1]; 
   for(i; i<(s -1); i++) 
     { 
      copy[i] = ai(v[i+1]); 
     } 
          
    pthread_t thread1, thread2, thread3; 
    const char *msg1 = "This is Thread 1"; 
    const char *msg2 = "This is Thread 2"; 
    const char *msg3 = "This is Thread 3"; 
     
    int  t1, t2, t3; 
      printf("Running: %s\n\n", v[0]); 
      
      dtstruct ds = {s-1, copy}; 
   
    t1 = pthread_create(&thread1,NULL,(void *) avg,(void *) &ds); 
     if(t1) 
     { 
         printf(stderr,"Error %d\n", t1); 
         exit(EXIT_FAILURE); 
     } 
   
    t2 = pthread_create(&thread2, NULL,(void *) min,(void *) &ds); 
     if(t2) 
     { 
         printf(stderr,"Error %d\n",t2); 
         exit(EXIT_FAILURE); 
     } 
       
     t3 = pthread_create(&thread3, NULL,(void *) max,(void *) &ds); 
     if(t3) 
     { 
         printf(stderr,"Error %d\n", t3); 
         exit(EXIT_FAILURE); 
     } 
   
     printf("Thread 1 returns: %d\n",t1); 
     printf("Thread 2 returns: %d\n",t2); 
     printf("Thread 3 returns: %d\n\n",t3); 

    pthread_join(thread1, NULL); 
    pthread_join(thread2, NULL);
    pthread_join(thread3, NULL); 

    printf("The minimum value is:  %d\n", min); 
    printf("The maximum value is:  %d\n", max); 
    printf("The average value is:  %g\n", avg); 
   
     exit(EXIT_SUCCESS); 
 } 
  
 void *avg(void *ptr) 
 { 
     dtstruct * copy; 
     copy=(dtstruct *)ptr; 
      
     int i,sz=copy->size; 
   
     for(i=0;i<sz;i++) 
    { 
         avg=avg+(copy->values[i]);     
    }                                
     avg =(int)(avg/sz);            
 } 
 
 
 void *min(void *ptr) 
 { 
     dtstruct * copy; 
     copy=(dtstruct *) ptr; 
      
    int i,sz = copy->size; 
      
     min = (copy->values[0]); 
     for(i=1;i<sz; i++) 
     { 
         if(min>(copy->values[i])) 
         { 
           min=(copy->values[i]); 
         } 
     } 
 } 
 
 
 void *max(void *ptr) 
 { 
   dtstruct * copy; 
   copy=(dtstruct *)ptr; 
      
    int i,sz=copy->size; 
       
     max = copy->values[0]; 
      
     for(i=1; i<sz; i++) 
     { 
       if(max<copy->values[i]) 
         { 
             max=copy->values[i]; 
         } 
     } 
 } 

 

